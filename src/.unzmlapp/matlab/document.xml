<?xml version="1.0" encoding="UTF-8" standalone="no" ?><w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main"><w:body><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[classdef HEKA_Explorer < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        MainFIgure                    matlab.ui.Figure
        GridLayout                    matlab.ui.container.GridLayout
        OptionsPanel                  matlab.ui.container.Panel
        AppTitle                      matlab.ui.control.Label
        DataInformation               matlab.ui.control.EditField
        OptionsGroup                  matlab.ui.container.TabGroup
        DataOptionsTab                matlab.ui.container.Tab
        DataLoadingOptionsPanel       matlab.ui.container.Panel
        LoadDataButton                matlab.ui.control.Button
        DataFormatButtonGroup         matlab.ui.container.ButtonGroup
        LoadDATPatchMasterButton      matlab.ui.control.RadioButton
        LoadMATDataTableButton        matlab.ui.control.RadioButton
        LoadITXPatchMasterButton      matlab.ui.control.RadioButton
        LoadMATPatchMasterButton      matlab.ui.control.RadioButton
        LoadMATITXButton              matlab.ui.control.RadioButton
        DataConverstionPanel          matlab.ui.container.Panel
        ConvertITXtoMATButton         matlab.ui.control.Button
        ConvertDATtoMATButton         matlab.ui.control.Button
        DataLog                       matlab.ui.control.TextArea
        ViewOptionsTab                matlab.ui.container.Tab
        ViewProtocolAndSweepPanel     matlab.ui.container.Panel
        ViewProtocolSelectionLabel    matlab.ui.control.Label
        ViewProtocolSelection         matlab.ui.control.DropDown
        ViewProtocolNameChanger       matlab.ui.control.Button
        ViewPreviousProtocol          matlab.ui.control.Button
        ViewNextProtocol              matlab.ui.control.Button
        ViewSweepSelectionLabel       matlab.ui.control.Label
        ViewSweepSelection            matlab.ui.control.EditField
        ViewAllSweep                  matlab.ui.control.CheckBox
        VIewPreviousSweep             matlab.ui.control.Button
        ViewNextSweep                 matlab.ui.control.Button
        ViewPlotPropertiesPanel       matlab.ui.container.Panel
        VIewPlotNumberLabel           matlab.ui.control.Label
        ViewPlotNumber                matlab.ui.control.DropDown
        ViewPlotHeightRatioLabel      matlab.ui.control.Label
        ViewPlotHeightRatio           matlab.ui.control.EditField
        ViewVariableSelectionPanel    matlab.ui.container.Panel
        ViewVariableGrid              matlab.ui.container.GridLayout
        ViewVariable_1                matlab.ui.control.DropDown
        ViewVariable_2                matlab.ui.control.DropDown
        ViewVariable_3                matlab.ui.control.DropDown
        ViewVariable_4                matlab.ui.control.DropDown
        ViewVariable_5                matlab.ui.control.DropDown
        ViewVariable_6                matlab.ui.control.DropDown
        ViewVariable_7                matlab.ui.control.DropDown
        ViewVariable_8                matlab.ui.control.DropDown
        ViewVariable_9                matlab.ui.control.DropDown
        ViewVariablePropertiesPanel   matlab.ui.container.Panel
        ViewVariableOrignalNameLabel  matlab.ui.control.Label
        ViewVariableOrignalName       matlab.ui.control.DropDown
        ViewVariableNewNameLabel      matlab.ui.control.Label
        ViewVariableNewName           matlab.ui.control.EditField
        ViewVariableColorButton       matlab.ui.control.Button
        ViewVariableSaveButton        matlab.ui.control.StateButton
        ViewVariableYLimLabel         matlab.ui.control.Label
        ViewVariableYLimLowerBound    matlab.ui.control.NumericEditField
        ViewVariableYLimUpperBound    matlab.ui.control.NumericEditField
        ViewVariableYLimAuto          matlab.ui.control.CheckBox
        ViewXAxispropertiesPanel      matlab.ui.container.Panel
        VIewShowAllXAxis              matlab.ui.control.StateButton
        ViewVariableXLimLabel         matlab.ui.control.Label
        ViewVariableXLimLowerBound    matlab.ui.control.NumericEditField
        ViewVariableXLimUpperBound    matlab.ui.control.NumericEditField
        ViewVariableXLimAuto          matlab.ui.control.CheckBox
        ViewSaveOptionsPanel          matlab.ui.container.Panel
        ViewSaveSelectedOnly          matlab.ui.control.CheckBox
        ViewSaveDataFormat            matlab.ui.container.ButtonGroup
        ViewSaveMatButton             matlab.ui.control.RadioButton
        ViewSaveCSVButton             matlab.ui.control.RadioButton
        ViewSaveDataButton            matlab.ui.control.Button
        ViewScreenshotButton          matlab.ui.control.Button
        ViewLog                       matlab.ui.control.TextArea
        AnalysisOptionsTab            matlab.ui.container.Tab
        AnalysisLog                   matlab.ui.control.TextArea
        OutputsPanel                  matlab.ui.container.Panel
        OutputsGroup                  matlab.ui.container.TabGroup
        ViewOutputsTab                matlab.ui.container.Tab
        ViewFigureBoundary            matlab.ui.container.Panel
        AnalysisOutputsTab            matlab.ui.container.Tab
        AnalysisFigureBoundary        matlab.ui.container.Panel
    end

    % Properties that correspond to apps with auto-reflow
    properties (Access = private)
        onePanelWidth = 576;
    end

    properties (Access = public)
        % TODO: turn these into PRIVATE after development
        view_max_numplots = 9;          % maximum number of allowed plots in View
        current_data = struct;          % currently plotted data
        current_settings = struct;      % current settings/options
        current_variables = struct;     % current variables
        
        extopts = struct(...
            'DataAlreadyZeroed_inputs', ...
            {{'I know they ARE',...
            'I know they are NOT', ...
            'Unsure but let''s go with YES', ...
            'Unsure but let''s go with NO'}});
    end
    
    properties (Access = public)
        % TODO: decide on whether this should be publicly accessible or
        % turned to private
        data_table;                     % experiment data table
    end
    
    methods (Access = private)
        
        function [file_format, file_source] = getLoadDataFormat(app)
            selected_format = app.DataFormatButtonGroup.SelectedObject.Text;
            
            switch upper(selected_format)
                case upper('dat (from PatchMaster)')
                    file_format = 'dat';
                    file_source = 'PATCHMASTER::DAT';
                case upper('mat (data table)')
                    file_format = 'mat';
                    file_source = 'PATCHMASTER::DAT->HEKAEXPLORER::MAT';
                case upper('itx (from PatchMaster)')
                    file_format = 'itx';
                    file_source = 'PATCHMASTER::ITX';
                case upper('mat (from PatchMaster)')
                    file_format = 'mat';
                    file_source = 'PATCHMASTER::MAT';
                case upper('mat (from itx)')
                    file_format = 'mat';
                    file_source = 'PATCHMASTER::ITX->HEKAEXPLORER::MAT';
                otherwise
                    app.updateLog('DataLog', 'WARNING', ...
                        sprintf('%s is not an acceptable data format option. Nothing will be loaded.', selected_format));
                    file_format = 'INVALID';
                    file_source = 'INVALID';
            end
        end
        
        function updateLog(app, componentName, tag, newMessage)
            tag = upper(tag);
            app.(componentName).Value = [app.(componentName).Value; {sprintf('%s:\t%s', tag, newMessage)}];
            switch tag
                case {'WARNING', 'WARN'}
                    newMessage = [newMessage, 'Sorry, not sorry!'];
                    uialert(app.MainFIgure, newMessage, 'Icon', 'warning');
                case {'ERROR', 'ERR'}
                    newMessage = [newMessage, 'Actually, so sorry!'];
                    uialert(app.MainFIgure, newMessage, 'Icon', 'error');
            end
            
        end
        
        function initializeAfterLoadingData(app)
            
            selected_protocol_value = 1;
            app.current_settings.available_protocols = cellfun(@(ind_rec, stim_name) ...
                sprintf('%02d: %s',ind_rec,stim_name), ...
                num2cell(app.data_table.Rec), app.data_table.Stimulus, ...
                'uni', 0);
            app.current_settings.original_available_protocols = app.current_settings.available_protocols;
            
            % ProtocolSelection
            app.ViewProtocolSelection.Enable = 'on';
            app.ViewProtocolNameChanger.Enable = 'on';
            app.ViewNextProtocol.Enable = 'on';
            app.ViewPreviousProtocol.Enable = 'on';
            app.ViewProtocolSelection.Items = app.current_settings.available_protocols;
            app.ViewProtocolSelection.ItemsData = app.data_table.Rec;
            app.ViewProtocolSelection.Value = selected_protocol_value;
            
            
            % ViewPlotNumber
            app.ViewPlotNumber.Items = cellfun(@num2str, num2cell(1:app.view_max_numplots), 'uni', 0);
            app.ViewPlotNumber.ItemsData = 1:app.view_max_numplots;
            app.ViewPlotNumber.Enable = 'on';
            
            app.ViewProtocolSelectionChanged;
            
        end
        
        function switchToViewTabs(app)
            app.OptionsGroup.SelectedTab = app.ViewOptionsTab;
            app.OutputsGroup.SelectedTab = app.ViewOutputsTab;
        end
        
        function switchToAnalysTabs(app)
            app.OptionsGroup.SelectedTab = app.AnalysisOptionsTab;
            app.OutputsGroup.SelectedTab = app.AnalysisOutputsTab;
        end
        
        function DataAlreadyZeroed_answer = promptDataAlreadyZeroedHEKAPatchMasterImporter(app, full_filename)
            DataAlreadyZeroed_answer = listdlg('PromptString', ...
                {'Do you know if data have already been zeroed?', full_filename, '', ''}, ...
                'SelectionMode', 'single', ...
                'ListString', app.extopts.DataAlreadyZeroed_inputs, ...
                'ListSize', [300, 100]);
            if isempty(DataAlreadyZeroed_answer)
                DataAlreadyZeroed_answer = nan;
            else
                DataAlreadyZeroed_answer = DataAlreadyZeroed_answer == 1 || DataAlreadyZeroed_answer == 3;
            end
            
        end
        
        function dTbl = getHEKAImportedDataTable(app, full_filename)
            DataAlreadyZeroed_answer = app.promptDataAlreadyZeroedHEKAPatchMasterImporter(full_filename);
            
            if isnan(DataAlreadyZeroed_answer), dTbl = ''; return; end
            
            try
                tmp_data = HEKA_Importer(full_filename, 'DataAlreadyZeroed', DataAlreadyZeroed_answer);
            catch
                app.updateLog('DataLog', 'ERROR', sprintf('HEKA_Importer could not load %s.', full_filename));
            end
            
            if isempty(tmp_data.RecTable)
                app.updateLog('DataLog', 'WARNING', 'The data table was empty. Nothing will be loaded in.');
                return;
            end
            
            dTbl = tmp_data.RecTable;
        end
        
        function getRecordings(app, ind_rec)
            
            dt_ms = 1000/double(app.data_table.SR(ind_rec));
            results = struct('channels', struct(), 'stimulus', struct(), ...
                'dt_ms', dt_ms, 't', '', 'num_sweeps', double(app.data_table.nSweeps(ind_rec)));
            
            variable_names = struct;
            current_varind = 1;
            
            % Get monitored channel data
            channel_units = app.data_table.ChUnit{ind_rec};
            channel_names = app.data_table.ChName{ind_rec};
            channel_data  = app.data_table.dataRaw{ind_rec};
            
            num_channels = length(channel_data);
            for ind_chan = 1:num_channels
                chan_unit  = channel_units{ind_chan};
                chan_datum = channel_data{ind_chan};
                
                switch upper(chan_unit)
                    case 'A'
                        chan_unit  = 'nA';
                        chan_datum = chan_datum * 1e9;
                        chan_ylim = [-4, 0.5];
                    case 'V'
                        chan_unit  = 'mV';
                        chan_datum = chan_datum * 1e3;
                        chan_ylim = [-90, 60];
                    otherwise
                        error('%s is not an acceptable channel unit as this point', chan_unit);
                end
                
                channel_units{ind_chan} = chan_unit;
                channel_data{ind_chan} = chan_datum;
                
                variable_names.(sprintf('var%d', current_varind)) = struct(...
                    'original_name', channel_names{ind_chan}, ...
                    'new_name', channel_names{ind_chan}, ...
                    'identity', 'channels', ...
                    'index', ind_chan, ...
                    'unit', chan_unit, ...
                    'save', 1, ...
                    'color', 'k', ...
                    'axes_indices', [], ...
                    'ylim', chan_ylim ...
                    );
                current_varind = current_varind + 1;
            end
            
            results.channels.names = channel_names;
            results.channels.units = channel_units;
            results.channels.data  = channel_data;
            results.channels.num   = num_channels;
            
            % Get stimulus data
            stim_data = app.data_table.stimWave{ind_rec};
            stim_units = app.data_table.stimUnit{ind_rec};
            stim_names = fieldnames(stim_data);
            num_stims = length(stim_names);
            stim_units = cellfun(@(x) x(1), stim_units, 'uni', 0);
            
            for ind_stim = 1:num_stims
                variable_names.(sprintf('var%d', current_varind)) = struct(...
                    'original_name', stim_names{ind_stim}, ...
                    'new_name', stim_names{ind_stim}, ...
                    'identity', 'stimulus', ...
                    'index', ind_stim, ...
                    'unit', stim_units{ind_stim}, ...
                    'save', 1, ...
                    'color', 'r', ...
                    'axes_indices', [], ...
                    'ylim', 'auto' ...
                    );
                current_varind = current_varind + 1;
            end
            results.stimulus.names = stim_names;
            results.stimulus.units = stim_units;
            results.stimulus.data  = cellfun(@(x) stim_data.(x), stim_names, 'uni', 0);
            results.stimulus.num   = num_stims;
            
            % Time vector
            len_dat = size(channel_data{1},1);
            results.t = dt_ms*(0:(len_dat-1));
            
            % Update properties of apps to save these data
            app.current_data = results;
            app.current_variables = variable_names;
            
            app.current_settings.xlim = 'auto';
        end
        
        function results = showSelectedSweep(app)
            
        end
        
        function ViewAllSweepTickedInitialized(app)
            if app.ViewAllSweep.Value == 1
                sweep_selection_choice = 'off';
                if isfield(app.current_data, 'num_sweeps')
                    app.current_settings.sweeps.selected = 1:app.current_settings.sweeps.max;
                    app.ViewSweepSelection.Value = sprintf('1:%d', app.current_settings.sweeps.max);
                end
            else
                sweep_selection_choice = 'on';
                app.SweepSelectionInput.String = '1';
                app.current_settings.sweeps.selected = 1;
            end
            
            app.SweepSelectionInput.Enable = sweep_selection_choice;
            app.SweepSelectionNextButton.Enable = sweep_selection_choice;
            app.SweepSelectionPreviousButton.Enable = sweep_selection_choice;
        end
    end
    
    
    

    % Callbacks that handle component events
    methods (Access = private)

        % Button pushed function: LoadDataButton
        function LoadDataButtonPushed(app, event)
            % Prompt get file
            if ~isfield(app.current_settings, 'file_path'), app.current_settings.file_path = pwd; end
            file_path = app.current_settings.file_path;
            
            [file_format, file_source] = app.getLoadDataFormat;
            [file_name, file_path] = uigetfile(fullfile(file_path,['*.' file_format]), ...
                sprintf('Select a %s file to read', upper(file_format)), 'MultiSelect',"off");
            
            if file_name == 0, return; end
            
            app.current_settings.file_path = file_path;
            app.current_settings.file_name = file_name;
            
            % Update log
            app.updateLog('DataLog', 'DATA', 'wait for it ...');
            pause(0.001);
            
            % Obtain data table
            full_filename = fullfile(file_path, file_name);
            switch file_source
                case 'PATCHMASTER::DAT'
                    tmpdTbl = app.getHEKAImportedDataTable(full_filename);
                    if isempty(tmpdTbl), return; end
                    app.data_table = tmpdTbl;
                case 'PATCHMASTER::DAT->HEKAEXPLORER::MAT'
                    tmp_data = load(full_filename, 'data_table');
                    app.data_table = tmp_data.data_table;
                otherwise
                    app.updateLog('DataLog', 'WARNING', 'The file source option is either invalid or unimplemented for reading. Nothing will be loaded in.');
            end
            
            app.DataInformation.Value = file_name;
            app.updateLog('DataLog', 'DATA', sprintf('File "%s" loaded.', full_filename));
            app.updateLog('DataLog', 'TIPS', 'Now you can click on the other tabs to toy around.');
            
            % Initialize
            app.switchToViewTabs;
            app.initializeAfterLoadingData;
            
        end

        % Button pushed function: ConvertDATtoMATButton
        function ConvertDATtoMATButtonPushed(app, event)
            sel_opts = {'Save the loaded DAT as MAT','Convert other DAT files','Cancel'};
            selection = uiconfirm(app.MainFIgure,'Do you want to convert the loaded data?', 'Convert DAT to MAT',...
                'Options', sel_opts, 'DefaultOption',1,'CancelOption',3);
            
            
            switch selection
                case sel_opts{1}
                    if isempty(app.data_table)
                        app.updateLog('DataLog', 'WARNING', 'Empty data table. Please load the data again. Nothing will be saved.');
                        return;
                    end
                    
                    [save_datatable_name, save_datatable_path] = uiputfile('.mat', ...
                        'Select a home for the MAT data table file', ...
                        sprintf('%s.mat', fullfile(app.current_settings.file_path, app.current_settings.file_name(1:end-4))));
                    
                    if save_datatable_name == 0, return; end
                    save_filename = fullfile(save_datatable_path, save_datatable_name);
                    data_table = app.data_table; %#ok<ADPROPLC>
                    save(save_filename, 'data_table');
                    app.updateLog('DataLog', 'DATA', sprintf('"%s" was saved at %s', save_datatable_name, save_datatable_path));
                case sel_opts{2}
                    if ~isfield(app.current_settings, 'file_path')
                        file_path = pwd;
                    else
                        file_path = app.current_settings.file_path;
                    end
                    
                    [file_names, file_path] = uigetfile(fullfile(file_path,'*.dat'), ...
                        sprintf('Select a %s file to read', 'MAT'), 'MultiSelect',"on");
                    if isnumeric(file_path), return; end
                    if ischar(file_names), file_names = {file_names}; end
                    for ind_file = 1:length(file_names)
                        full_filename = fullfile(file_path, file_names{ind_file});
                        data_table = app.getHEKAImportedDataTable(full_filename);  %#ok<ADPROPLC>
                        if isempty(data_table)  %#ok<ADPROPLC>
                            app.updateLog('DataLog', 'WARNING', 'You missed an important selections along the way. Nothing converted.')
                            return;
                        end
                        
                        [save_datatable_name, save_datatable_path] = uiputfile('.mat', ...
                            'Select a home for the MAT data table file', ...
                            sprintf('%s.mat', full_filename(1:end-4)));
                        
                        if save_datatable_name == 0, return; end
                        save_filename = fullfile(save_datatable_path, save_datatable_name);
                        save(save_filename, 'data_table');
                        app.updateLog('DataLog', 'DATA', sprintf('"%s" was saved at %s', save_datatable_name, save_datatable_path));
                    end
                case sel_opts{3}
                    return;
            end
            
        end

        % Button pushed function: ConvertITXtoMATButton
        function ConvertITXtoMATButtonPushed(app, event)
            app.updateLog('DataLog', 'WARNING', ['Nothing will be printed here for ITX->MAT conversion information. ' ...
                'Direct your attention to the command window. Sorry, I''m too lazy to integrate it in']);
            itx2mat;
            app.updateLog('DataLog', 'DATA', ['Seems like it''s done. Hope it was successful. ' ...
                'Again, go to the command window for more info']);
        end

        % Value changed function: ViewProtocolSelection
        function ViewProtocolSelectionChanged(app, event)
            % Get recordings from the selected protocol
            selected_protocol_value = app.ViewProtocolSelection.Value;
            
            app.current_settings.protocol.value = selected_protocol_value;
            app.current_settings.protocol.name = app.current_settings.available_protocols{selected_protocol_value};
            
            app.getRecordings(selected_protocol_value);
            num_sweeps = app.current_data.num_sweeps;
            app.current_settings.sweeps.max = num_sweeps;
            
            % ViewSweepSelection
            app.ViewAllSweep.Enable = 'on';
            app.ViewAllSweep.Value = 1;
            app.ViewAllSweepTickedInitialized;
            app.ViewSweepSelection.Enable = 'on';
            
            var_names = struct2cell(structfun(@(x) x.original_name, app.current_variables, 'uni', 0));
            app.NumberOfVariableMenu.Value = min(app.max_numplots, length(var_names));
            
            selected_varinds = (1:app.max_numplots)';
            selected_varinds(selected_varinds > length(var_names)) = 1;
            arrayfun(@(x,v) set(x, 'String', var_names, 'Value', v), ...
                app.VariableSelection_MenuList, selected_varinds);
            
            app.NumberOfVariableMenuChanged;
            
            app.VariableManipulation_OriginalNameMenu.String = var_names;
            app.VariableManipulation_OriginalNameMenu.Value = 1;
            app.VariableManipulation_OriginalNameMenuChanged;
            
            app.XAxisLinkButton.Value = 1;
            app.XAxisShowAllButton.Value = 0;
            
            app.plotTraces;
        end

        % Value changed function: ViewAllSweep
        function ViewAllSweepTicked(app, event)
            app.ViewAllSweepTickedInitialized;
            app.showOnlySelectedSweep;
        end

        % Changes arrangement of the app based on UIFigure width
        function updateAppLayout(app, event)
            currentFigureWidth = app.MainFIgure.Position(3);
            if(currentFigureWidth <= app.onePanelWidth)
                % Change to a 2x1 grid
                app.GridLayout.RowHeight = {866, 866};
                app.GridLayout.ColumnWidth = {'1x'};
                app.OutputsPanel.Layout.Row = 2;
                app.OutputsPanel.Layout.Column = 1;
            else
                % Change to a 1x2 grid
                app.GridLayout.RowHeight = {'1x'};
                app.GridLayout.ColumnWidth = {370, '1x'};
                app.OutputsPanel.Layout.Row = 1;
                app.OutputsPanel.Layout.Column = 2;
            end
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create MainFIgure and hide until all components are created
            app.MainFIgure = uifigure('Visible', 'off');
            app.MainFIgure.AutoResizeChildren = 'off';
            app.MainFIgure.Position = [100 100 1338 866];
            app.MainFIgure.Name = 'UI Figure';
            app.MainFIgure.SizeChangedFcn = createCallbackFcn(app, @updateAppLayout, true);

            % Create GridLayout
            app.GridLayout = uigridlayout(app.MainFIgure);
            app.GridLayout.ColumnWidth = {370, '1x'};
            app.GridLayout.RowHeight = {'1x'};
            app.GridLayout.ColumnSpacing = 0;
            app.GridLayout.RowSpacing = 0;
            app.GridLayout.Padding = [0 0 0 0];
            app.GridLayout.Scrollable = 'on';

            % Create OptionsPanel
            app.OptionsPanel = uipanel(app.GridLayout);
            app.OptionsPanel.Layout.Row = 1;
            app.OptionsPanel.Layout.Column = 1;
            app.OptionsPanel.Scrollable = 'on';

            % Create AppTitle
            app.AppTitle = uilabel(app.OptionsPanel);
            app.AppTitle.FontSize = 20;
            app.AppTitle.Position = [14 824 298 25];
            app.AppTitle.Text = 'PatchMaster recordings explorer';

            % Create DataInformation
            app.DataInformation = uieditfield(app.OptionsPanel, 'text');
            app.DataInformation.HorizontalAlignment = 'center';
            app.DataInformation.Enable = 'off';
            app.DataInformation.Position = [14 794 252 22];
            app.DataInformation.Value = '(no data loaded yet)';

            % Create OptionsGroup
            app.OptionsGroup = uitabgroup(app.OptionsPanel);
            app.OptionsGroup.Position = [13 14 346 768];

            % Create DataOptionsTab
            app.DataOptionsTab = uitab(app.OptionsGroup);
            app.DataOptionsTab.Title = 'Data';
            app.DataOptionsTab.Scrollable = 'on';

            % Create DataLoadingOptionsPanel
            app.DataLoadingOptionsPanel = uipanel(app.DataOptionsTab);
            app.DataLoadingOptionsPanel.Position = [12 523 205 203];

            % Create LoadDataButton
            app.LoadDataButton = uibutton(app.DataLoadingOptionsPanel, 'push');
            app.LoadDataButton.ButtonPushedFcn = createCallbackFcn(app, @LoadDataButtonPushed, true);
            app.LoadDataButton.Tooltip = {'Click here and choose the file format to load the data'};
            app.LoadDataButton.Position = [16 169 100 22];
            app.LoadDataButton.Text = 'Load data';

            % Create DataFormatButtonGroup
            app.DataFormatButtonGroup = uibuttongroup(app.DataLoadingOptionsPanel);
            app.DataFormatButtonGroup.Tooltip = {'choose data format (the greyed ones are unimplmented)'; ''};
            app.DataFormatButtonGroup.BorderType = 'none';
            app.DataFormatButtonGroup.Title = 'Data format';
            app.DataFormatButtonGroup.Position = [16 8 166 144];

            % Create LoadDATPatchMasterButton
            app.LoadDATPatchMasterButton = uiradiobutton(app.DataFormatButtonGroup);
            app.LoadDATPatchMasterButton.Tooltip = {'.dat files generated for the entire experiment from PatchMaster'};
            app.LoadDATPatchMasterButton.Text = 'dat (from PatchMaster)';
            app.LoadDATPatchMasterButton.Position = [11 99 145 22];
            app.LoadDATPatchMasterButton.Value = true;

            % Create LoadMATDataTableButton
            app.LoadMATDataTableButton = uiradiobutton(app.DataFormatButtonGroup);
            app.LoadMATDataTableButton.Tooltip = {'.mat files generated by this program that had the data table, extracted from the HEKA_Importer'};
            app.LoadMATDataTableButton.Text = 'mat (data table)';
            app.LoadMATDataTableButton.Position = [11 76 106 22];

            % Create LoadITXPatchMasterButton
            app.LoadITXPatchMasterButton = uiradiobutton(app.DataFormatButtonGroup);
            app.LoadITXPatchMasterButton.Enable = 'off';
            app.LoadITXPatchMasterButton.Tooltip = {'.itx files from PatchMaster for single protocol'; ''};
            app.LoadITXPatchMasterButton.Text = 'itx (from PatchMaster)';
            app.LoadITXPatchMasterButton.Position = [11 53 140 22];

            % Create LoadMATPatchMasterButton
            app.LoadMATPatchMasterButton = uiradiobutton(app.DataFormatButtonGroup);
            app.LoadMATPatchMasterButton.Enable = 'off';
            app.LoadMATPatchMasterButton.Tooltip = {'.mat files from PatchMaster for single protocol'};
            app.LoadMATPatchMasterButton.Text = 'mat (from PatchMaster)';
            app.LoadMATPatchMasterButton.Position = [11 31 148 22];

            % Create LoadMATITXButton
            app.LoadMATITXButton = uiradiobutton(app.DataFormatButtonGroup);
            app.LoadMATITXButton.Enable = 'off';
            app.LoadMATITXButton.Tooltip = {'.mat files converted from .itx files'};
            app.LoadMATITXButton.Text = 'mat (from itx)';
            app.LoadMATITXButton.Position = [11 9 92 22];

            % Create DataConverstionPanel
            app.DataConverstionPanel = uipanel(app.DataOptionsTab);
            app.DataConverstionPanel.TitlePosition = 'centertop';
            app.DataConverstionPanel.Title = 'Conversion utilities';
            app.DataConverstionPanel.FontWeight = 'bold';
            app.DataConverstionPanel.Position = [12 405 205 101];

            % Create ConvertITXtoMATButton
            app.ConvertITXtoMATButton = uibutton(app.DataConverstionPanel, 'push');
            app.ConvertITXtoMATButton.ButtonPushedFcn = createCallbackFcn(app, @ConvertITXtoMATButtonPushed, true);
            app.ConvertITXtoMATButton.Tooltip = {'Convert the .itx files to.mat files for easy reading. Can do batch mode as well.'};
            app.ConvertITXtoMATButton.Position = [33 15 140 22];
            app.ConvertITXtoMATButton.Text = 'Convert ITX to MAT';

            % Create ConvertDATtoMATButton
            app.ConvertDATtoMATButton = uibutton(app.DataConverstionPanel, 'push');
            app.ConvertDATtoMATButton.ButtonPushedFcn = createCallbackFcn(app, @ConvertDATtoMATButtonPushed, true);
            app.ConvertDATtoMATButton.Tooltip = {'Convert the PatchMaster .dat files to.mat files for easy reading (essentially from HEKA Importer). Can do batch mode as well.'};
            app.ConvertDATtoMATButton.Position = [33 47 140 22];
            app.ConvertDATtoMATButton.Text = 'Convert DAT to MAT';

            % Create DataLog
            app.DataLog = uitextarea(app.DataOptionsTab);
            app.DataLog.FontName = 'Courier';
            app.DataLog.FontSize = 9;
            app.DataLog.Enable = 'off';
            app.DataLog.Position = [12 10 324 115];
            app.DataLog.Value = {'Log'};

            % Create ViewOptionsTab
            app.ViewOptionsTab = uitab(app.OptionsGroup);
            app.ViewOptionsTab.Title = 'View options';
            app.ViewOptionsTab.Scrollable = 'on';

            % Create ViewProtocolAndSweepPanel
            app.ViewProtocolAndSweepPanel = uipanel(app.ViewOptionsTab);
            app.ViewProtocolAndSweepPanel.Title = 'Protocol and sweep selection';
            app.ViewProtocolAndSweepPanel.FontWeight = 'bold';
            app.ViewProtocolAndSweepPanel.Position = [18 644 323 85];

            % Create ViewProtocolSelectionLabel
            app.ViewProtocolSelectionLabel = uilabel(app.ViewProtocolAndSweepPanel);
            app.ViewProtocolSelectionLabel.HorizontalAlignment = 'right';
            app.ViewProtocolSelectionLabel.Position = [5 38 50 22];
            app.ViewProtocolSelectionLabel.Text = 'Protocol';

            % Create ViewProtocolSelection
            app.ViewProtocolSelection = uidropdown(app.ViewProtocolAndSweepPanel);
            app.ViewProtocolSelection.Items = {};
            app.ViewProtocolSelection.ValueChangedFcn = createCallbackFcn(app, @ViewProtocolSelectionChanged, true);
            app.ViewProtocolSelection.Enable = 'off';
            app.ViewProtocolSelection.Tooltip = {'Select a protocol'};
            app.ViewProtocolSelection.Position = [63 38 145 22];
            app.ViewProtocolSelection.Value = {};

            % Create ViewProtocolNameChanger
            app.ViewProtocolNameChanger = uibutton(app.ViewProtocolAndSweepPanel, 'push');
            app.ViewProtocolNameChanger.Enable = 'off';
            app.ViewProtocolNameChanger.Tooltip = {'Click here to change the name of the protocol'};
            app.ViewProtocolNameChanger.Position = [220 38 35 22];
            app.ViewProtocolNameChanger.Text = 'C';

            % Create ViewPreviousProtocol
            app.ViewPreviousProtocol = uibutton(app.ViewProtocolAndSweepPanel, 'push');
            app.ViewPreviousProtocol.IconAlignment = 'center';
            app.ViewPreviousProtocol.FontSize = 14;
            app.ViewPreviousProtocol.Enable = 'off';
            app.ViewPreviousProtocol.Tooltip = {'Previous protocol'};
            app.ViewPreviousProtocol.Position = [264 38 25 22];
            app.ViewPreviousProtocol.Text = '◀';

            % Create ViewNextProtocol
            app.ViewNextProtocol = uibutton(app.ViewProtocolAndSweepPanel, 'push');
            app.ViewNextProtocol.IconAlignment = 'center';
            app.ViewNextProtocol.FontSize = 14;
            app.ViewNextProtocol.Enable = 'off';
            app.ViewNextProtocol.Tooltip = {'Next protocol'};
            app.ViewNextProtocol.Position = [291 38 25 22];
            app.ViewNextProtocol.Text = '▶';

            % Create ViewSweepSelectionLabel
            app.ViewSweepSelectionLabel = uilabel(app.ViewProtocolAndSweepPanel);
            app.ViewSweepSelectionLabel.HorizontalAlignment = 'right';
            app.ViewSweepSelectionLabel.Position = [13 10 42 22];
            app.ViewSweepSelectionLabel.Text = 'Sweep';

            % Create ViewSweepSelection
            app.ViewSweepSelection = uieditfield(app.ViewProtocolAndSweepPanel, 'text');
            app.ViewSweepSelection.Enable = 'off';
            app.ViewSweepSelection.Position = [63 10 145 22];

            % Create ViewAllSweep
            app.ViewAllSweep = uicheckbox(app.ViewProtocolAndSweepPanel);
            app.ViewAllSweep.ValueChangedFcn = createCallbackFcn(app, @ViewAllSweepTicked, true);
            app.ViewAllSweep.Enable = 'off';
            app.ViewAllSweep.Tooltip = {'Click all to plot all weeps '};
            app.ViewAllSweep.Text = ' all';
            app.ViewAllSweep.Position = [220 10 37 22];

            % Create VIewPreviousSweep
            app.VIewPreviousSweep = uibutton(app.ViewProtocolAndSweepPanel, 'push');
            app.VIewPreviousSweep.IconAlignment = 'center';
            app.VIewPreviousSweep.FontSize = 14;
            app.VIewPreviousSweep.Enable = 'off';
            app.VIewPreviousSweep.Tooltip = {'Previous protocol'};
            app.VIewPreviousSweep.Position = [265 10 25 22];
            app.VIewPreviousSweep.Text = '◀';

            % Create ViewNextSweep
            app.ViewNextSweep = uibutton(app.ViewProtocolAndSweepPanel, 'push');
            app.ViewNextSweep.IconAlignment = 'center';
            app.ViewNextSweep.FontSize = 14;
            app.ViewNextSweep.Enable = 'off';
            app.ViewNextSweep.Tooltip = {'Next protocol'};
            app.ViewNextSweep.Position = [292 10 25 22];
            app.ViewNextSweep.Text = '▶';

            % Create ViewPlotPropertiesPanel
            app.ViewPlotPropertiesPanel = uipanel(app.ViewOptionsTab);
            app.ViewPlotPropertiesPanel.Title = 'Plot properties';
            app.ViewPlotPropertiesPanel.FontWeight = 'bold';
            app.ViewPlotPropertiesPanel.Scrollable = 'on';
            app.ViewPlotPropertiesPanel.Position = [18 577 323 55];

            % Create VIewPlotNumberLabel
            app.VIewPlotNumberLabel = uilabel(app.ViewPlotPropertiesPanel);
            app.VIewPlotNumberLabel.HorizontalAlignment = 'right';
            app.VIewPlotNumberLabel.Position = [10 7 40 22];
            app.VIewPlotNumberLabel.Text = 'Nunber';

            % Create ViewPlotNumber
            app.ViewPlotNumber = uidropdown(app.ViewPlotPropertiesPanel);
            app.ViewPlotNumber.Items = {};
            app.ViewPlotNumber.Enable = 'off';
            app.ViewPlotNumber.Tooltip = {'maximum 9 plots'};
            app.ViewPlotNumber.Position = [56 7 44 22];
            app.ViewPlotNumber.Value = {};

            % Create ViewPlotHeightRatioLabel
            app.ViewPlotHeightRatioLabel = uilabel(app.ViewPlotPropertiesPanel);
            app.ViewPlotHeightRatioLabel.HorizontalAlignment = 'right';
            app.ViewPlotHeightRatioLabel.Position = [105 7 67 22];
            app.ViewPlotHeightRatioLabel.Text = 'Height ratio';

            % Create ViewPlotHeightRatio
            app.ViewPlotHeightRatio = uieditfield(app.ViewPlotPropertiesPanel, 'text');
            app.ViewPlotHeightRatio.Enable = 'off';
            app.ViewPlotHeightRatio.Position = [177 7 134 22];

            % Create ViewVariableSelectionPanel
            app.ViewVariableSelectionPanel = uipanel(app.ViewOptionsTab);
            app.ViewVariableSelectionPanel.Title = 'Variable selections for plotting';
            app.ViewVariableSelectionPanel.FontWeight = 'bold';
            app.ViewVariableSelectionPanel.Scrollable = 'on';
            app.ViewVariableSelectionPanel.Position = [18 434 323 131];

            % Create ViewVariableGrid
            app.ViewVariableGrid = uigridlayout(app.ViewVariableSelectionPanel);
            app.ViewVariableGrid.ColumnWidth = {'1x', '1x', '1x'};
            app.ViewVariableGrid.RowHeight = {'1x', '1x', '1x'};

            % Create ViewVariable_1
            app.ViewVariable_1 = uidropdown(app.ViewVariableGrid);
            app.ViewVariable_1.Items = {};
            app.ViewVariable_1.Enable = 'off';
            app.ViewVariable_1.Tooltip = {'Select a variable to plot'};
            app.ViewVariable_1.Layout.Row = 1;
            app.ViewVariable_1.Layout.Column = 1;
            app.ViewVariable_1.Value = {};

            % Create ViewVariable_2
            app.ViewVariable_2 = uidropdown(app.ViewVariableGrid);
            app.ViewVariable_2.Items = {};
            app.ViewVariable_2.Enable = 'off';
            app.ViewVariable_2.Tooltip = {'Select a variable to plot'};
            app.ViewVariable_2.Layout.Row = 1;
            app.ViewVariable_2.Layout.Column = 2;
            app.ViewVariable_2.Value = {};

            % Create ViewVariable_3
            app.ViewVariable_3 = uidropdown(app.ViewVariableGrid);
            app.ViewVariable_3.Items = {};
            app.ViewVariable_3.Enable = 'off';
            app.ViewVariable_3.Tooltip = {'Select a variable to plot'};
            app.ViewVariable_3.Layout.Row = 1;
            app.ViewVariable_3.Layout.Column = 3;
            app.ViewVariable_3.Value = {};

            % Create ViewVariable_4
            app.ViewVariable_4 = uidropdown(app.ViewVariableGrid);
            app.ViewVariable_4.Items = {};
            app.ViewVariable_4.Enable = 'off';
            app.ViewVariable_4.Tooltip = {'Select a variable to plot'};
            app.ViewVariable_4.Layout.Row = 2;
            app.ViewVariable_4.Layout.Column = 1;
            app.ViewVariable_4.Value = {};

            % Create ViewVariable_5
            app.ViewVariable_5 = uidropdown(app.ViewVariableGrid);
            app.ViewVariable_5.Items = {};
            app.ViewVariable_5.Enable = 'off';
            app.ViewVariable_5.Tooltip = {'Select a variable to plot'};
            app.ViewVariable_5.Layout.Row = 2;
            app.ViewVariable_5.Layout.Column = 2;
            app.ViewVariable_5.Value = {};

            % Create ViewVariable_6
            app.ViewVariable_6 = uidropdown(app.ViewVariableGrid);
            app.ViewVariable_6.Items = {};
            app.ViewVariable_6.Enable = 'off';
            app.ViewVariable_6.Tooltip = {'Select a variable to plot'};
            app.ViewVariable_6.Layout.Row = 2;
            app.ViewVariable_6.Layout.Column = 3;
            app.ViewVariable_6.Value = {};

            % Create ViewVariable_7
            app.ViewVariable_7 = uidropdown(app.ViewVariableGrid);
            app.ViewVariable_7.Items = {};
            app.ViewVariable_7.Enable = 'off';
            app.ViewVariable_7.Tooltip = {'Select a variable to plot'};
            app.ViewVariable_7.Layout.Row = 3;
            app.ViewVariable_7.Layout.Column = 1;
            app.ViewVariable_7.Value = {};

            % Create ViewVariable_8
            app.ViewVariable_8 = uidropdown(app.ViewVariableGrid);
            app.ViewVariable_8.Items = {};
            app.ViewVariable_8.Enable = 'off';
            app.ViewVariable_8.Tooltip = {'Select a variable to plot'};
            app.ViewVariable_8.Layout.Row = 3;
            app.ViewVariable_8.Layout.Column = 2;
            app.ViewVariable_8.Value = {};

            % Create ViewVariable_9
            app.ViewVariable_9 = uidropdown(app.ViewVariableGrid);
            app.ViewVariable_9.Items = {};
            app.ViewVariable_9.Enable = 'off';
            app.ViewVariable_9.Tooltip = {'Select a variable to plot'};
            app.ViewVariable_9.Layout.Row = 3;
            app.ViewVariable_9.Layout.Column = 3;
            app.ViewVariable_9.Value = {};

            % Create ViewVariablePropertiesPanel
            app.ViewVariablePropertiesPanel = uipanel(app.ViewOptionsTab);
            app.ViewVariablePropertiesPanel.Title = 'Variable properties';
            app.ViewVariablePropertiesPanel.FontWeight = 'bold';
            app.ViewVariablePropertiesPanel.Scrollable = 'on';
            app.ViewVariablePropertiesPanel.Position = [18 310 323 113];

            % Create ViewVariableOrignalNameLabel
            app.ViewVariableOrignalNameLabel = uilabel(app.ViewVariablePropertiesPanel);
            app.ViewVariableOrignalNameLabel.Position = [7 67 80 22];
            app.ViewVariableOrignalNameLabel.Text = 'Original name';

            % Create ViewVariableOrignalName
            app.ViewVariableOrignalName = uidropdown(app.ViewVariablePropertiesPanel);
            app.ViewVariableOrignalName.Items = {};
            app.ViewVariableOrignalName.Enable = 'off';
            app.ViewVariableOrignalName.Position = [7 44 96 22];
            app.ViewVariableOrignalName.Value = {};

            % Create ViewVariableNewNameLabel
            app.ViewVariableNewNameLabel = uilabel(app.ViewVariablePropertiesPanel);
            app.ViewVariableNewNameLabel.Position = [113 67 63 22];
            app.ViewVariableNewNameLabel.Text = 'New name';

            % Create ViewVariableNewName
            app.ViewVariableNewName = uieditfield(app.ViewVariablePropertiesPanel, 'text');
            app.ViewVariableNewName.Enable = 'off';
            app.ViewVariableNewName.Position = [113 44 108 22];

            % Create ViewVariableColorButton
            app.ViewVariableColorButton = uibutton(app.ViewVariablePropertiesPanel, 'push');
            app.ViewVariableColorButton.Enable = 'off';
            app.ViewVariableColorButton.Position = [113 13 44 22];
            app.ViewVariableColorButton.Text = 'Color';

            % Create ViewVariableSaveButton
            app.ViewVariableSaveButton = uibutton(app.ViewVariablePropertiesPanel, 'state');
            app.ViewVariableSaveButton.Enable = 'off';
            app.ViewVariableSaveButton.Text = 'Save';
            app.ViewVariableSaveButton.Position = [165 13 44 22];

            % Create ViewVariableYLimLabel
            app.ViewVariableYLimLabel = uilabel(app.ViewVariablePropertiesPanel);
            app.ViewVariableYLimLabel.Position = [233 67 33 22];
            app.ViewVariableYLimLabel.Text = 'YLim';

            % Create ViewVariableYLimLowerBound
            app.ViewVariableYLimLowerBound = uieditfield(app.ViewVariablePropertiesPanel, 'numeric');
            app.ViewVariableYLimLowerBound.Enable = 'off';
            app.ViewVariableYLimLowerBound.Position = [232 44 40 22];

            % Create ViewVariableYLimUpperBound
            app.ViewVariableYLimUpperBound = uieditfield(app.ViewVariablePropertiesPanel, 'numeric');
            app.ViewVariableYLimUpperBound.Enable = 'off';
            app.ViewVariableYLimUpperBound.Position = [277 44 40 22];

            % Create ViewVariableYLimAuto
            app.ViewVariableYLimAuto = uicheckbox(app.ViewVariablePropertiesPanel);
            app.ViewVariableYLimAuto.Enable = 'off';
            app.ViewVariableYLimAuto.Text = 'auto';
            app.ViewVariableYLimAuto.FontSize = 10;
            app.ViewVariableYLimAuto.Position = [272 73 41 16];
            app.ViewVariableYLimAuto.Value = true;

            % Create ViewXAxispropertiesPanel
            app.ViewXAxispropertiesPanel = uipanel(app.ViewOptionsTab);
            app.ViewXAxispropertiesPanel.Title = 'X-axis properties';
            app.ViewXAxispropertiesPanel.FontWeight = 'bold';
            app.ViewXAxispropertiesPanel.Position = [18 184 117 115];

            % Create VIewShowAllXAxis
            app.VIewShowAllXAxis = uibutton(app.ViewXAxispropertiesPanel, 'state');
            app.VIewShowAllXAxis.Enable = 'off';
            app.VIewShowAllXAxis.Text = 'Show all X-axis';
            app.VIewShowAllXAxis.Position = [7 66 100 22];
            app.VIewShowAllXAxis.Value = true;

            % Create ViewVariableXLimLabel
            app.ViewVariableXLimLabel = uilabel(app.ViewXAxispropertiesPanel);
            app.ViewVariableXLimLabel.Position = [23 40 39 22];
            app.ViewVariableXLimLabel.Text = 'XLims';

            % Create ViewVariableXLimLowerBound
            app.ViewVariableXLimLowerBound = uieditfield(app.ViewXAxispropertiesPanel, 'numeric');
            app.ViewVariableXLimLowerBound.Enable = 'off';
            app.ViewVariableXLimLowerBound.Position = [22 13 40 22];

            % Create ViewVariableXLimUpperBound
            app.ViewVariableXLimUpperBound = uieditfield(app.ViewXAxispropertiesPanel, 'numeric');
            app.ViewVariableXLimUpperBound.Enable = 'off';
            app.ViewVariableXLimUpperBound.Position = [67 13 40 22];

            % Create ViewVariableXLimAuto
            app.ViewVariableXLimAuto = uicheckbox(app.ViewXAxispropertiesPanel);
            app.ViewVariableXLimAuto.Enable = 'off';
            app.ViewVariableXLimAuto.Text = 'auto';
            app.ViewVariableXLimAuto.FontSize = 10;
            app.ViewVariableXLimAuto.Position = [66 42 41 16];
            app.ViewVariableXLimAuto.Value = true;

            % Create ViewSaveOptionsPanel
            app.ViewSaveOptionsPanel = uipanel(app.ViewOptionsTab);
            app.ViewSaveOptionsPanel.Title = 'Save options';
            app.ViewSaveOptionsPanel.FontWeight = 'bold';
            app.ViewSaveOptionsPanel.Scrollable = 'on';
            app.ViewSaveOptionsPanel.Position = [147 188 194 111];

            % Create ViewSaveSelectedOnly
            app.ViewSaveSelectedOnly = uicheckbox(app.ViewSaveOptionsPanel);
            app.ViewSaveSelectedOnly.Enable = 'off';
            app.ViewSaveSelectedOnly.Text = 'selected only';
            app.ViewSaveSelectedOnly.Position = [10 62 92 22];

            % Create ViewSaveDataFormat
            app.ViewSaveDataFormat = uibuttongroup(app.ViewSaveOptionsPanel);
            app.ViewSaveDataFormat.Position = [118 38 60 45];

            % Create ViewSaveMatButton
            app.ViewSaveMatButton = uiradiobutton(app.ViewSaveDataFormat);
            app.ViewSaveMatButton.Text = 'mat';
            app.ViewSaveMatButton.Position = [6 25 43 17];
            app.ViewSaveMatButton.Value = true;

            % Create ViewSaveCSVButton
            app.ViewSaveCSVButton = uiradiobutton(app.ViewSaveDataFormat);
            app.ViewSaveCSVButton.Enable = 'off';
            app.ViewSaveCSVButton.Text = 'csv';
            app.ViewSaveCSVButton.Position = [6 3 43 17];

            % Create ViewSaveDataButton
            app.ViewSaveDataButton = uibutton(app.ViewSaveOptionsPanel, 'push');
            app.ViewSaveDataButton.Enable = 'off';
            app.ViewSaveDataButton.Position = [10 36 84 22];
            app.ViewSaveDataButton.Text = 'Save data';

            % Create ViewScreenshotButton
            app.ViewScreenshotButton = uibutton(app.ViewSaveOptionsPanel, 'push');
            app.ViewScreenshotButton.Enable = 'off';
            app.ViewScreenshotButton.Position = [10 6 109 22];
            app.ViewScreenshotButton.Text = 'Take screenshot';

            % Create ViewLog
            app.ViewLog = uitextarea(app.ViewOptionsTab);
            app.ViewLog.FontName = 'Courier';
            app.ViewLog.FontSize = 9;
            app.ViewLog.Enable = 'off';
            app.ViewLog.Position = [12 10 324 115];
            app.ViewLog.Value = {'Log'};

            % Create AnalysisOptionsTab
            app.AnalysisOptionsTab = uitab(app.OptionsGroup);
            app.AnalysisOptionsTab.Title = 'Analysis options';
            app.AnalysisOptionsTab.Scrollable = 'on';

            % Create AnalysisLog
            app.AnalysisLog = uitextarea(app.AnalysisOptionsTab);
            app.AnalysisLog.FontName = 'Courier';
            app.AnalysisLog.FontSize = 9;
            app.AnalysisLog.Enable = 'off';
            app.AnalysisLog.Position = [12 10 324 115];
            app.AnalysisLog.Value = {'Log'};

            % Create OutputsPanel
            app.OutputsPanel = uipanel(app.GridLayout);
            app.OutputsPanel.Layout.Row = 1;
            app.OutputsPanel.Layout.Column = 2;
            app.OutputsPanel.Scrollable = 'on';

            % Create OutputsGroup
            app.OutputsGroup = uitabgroup(app.OutputsPanel);
            app.OutputsGroup.Position = [10 13 942 826];

            % Create ViewOutputsTab
            app.ViewOutputsTab = uitab(app.OutputsGroup);
            app.ViewOutputsTab.Title = 'View output';

            % Create ViewFigureBoundary
            app.ViewFigureBoundary = uipanel(app.ViewOutputsTab);
            app.ViewFigureBoundary.Position = [17 21 915 762];

            % Create AnalysisOutputsTab
            app.AnalysisOutputsTab = uitab(app.OutputsGroup);
            app.AnalysisOutputsTab.Title = 'Analysis output';

            % Create AnalysisFigureBoundary
            app.AnalysisFigureBoundary = uipanel(app.AnalysisOutputsTab);
            app.AnalysisFigureBoundary.Position = [17 30 889 753];

            % Show the figure after all components are created
            app.MainFIgure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = HEKA_Explorer

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.MainFIgure)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.MainFIgure)
        end
    end
end]]></w:t></w:r></w:p></w:body></w:document>